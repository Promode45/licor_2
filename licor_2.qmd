---
title: "Untitled"
format: html
editor: visual
---

```{r}
#|echo: false
library(tidyverse)
library(janitor)
library(readr)
library(rstatix)
#install.packages("FSA")
library(FSA)
#install.packages("rcompanion")
library(rcompanion)
#install.packages("plotly")
library(plotly)
#install.packages("ggpubr")
library(ggpubr)
#install.packages("reshape")
library(reshape)
#install.packages("sciplot")
library(sciplot)
#install.packages("nlme")
library(nlme)
library(lme4)
library(emmeans)
library(broom)
library(multcomp)
library(car)

```

```{r}
#| echo: false
resp_data <- list.files(path = "/Users/pramodhegde/Library/CloudStorage/OneDrive-UniversityofGeorgia/Documents/Licor",
                        pattern = "*.csv",
                        full.names = T) %>% 
  lapply(read.csv, skip =3, header = F) %>% 
  bind_rows 
colnames(resp_data) <- c("co2", "date_time", "label", "swc", "flux", "ts", "ta")
resp_data_w <- resp_data %>% 
  na.omit() |> 
  filter(label != "Test")

```

The `echo: false` option disables the printing of code (only output is displayed).
```{r}
remove_outliers <- function(x, na.rm = TRUE, ...) {
  qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
  H <- 1.5 * IQR(x, na.rm = na.rm)
  y <- x
  y[x < (qnt[1] - H)] <- NA
  y[x > (qnt[2] + H)] <- NA
  y
  print(y)
}
```

```{r}
resp_data_w <- resp_data_w %>% 
  clean_names() %>% 
  mutate(date_time = as.POSIXct(date_time, tz = Sys.timezone(), format="%Y/%m/%d %H:%M:%S")) %>% 
  mutate(label = factor(label)) %>% 
  mutate(day = day(date_time)) %>% 
  mutate(month = month(date_time)) %>% 
  mutate(treatment = case_when( label %in% c(1,8,12,20,23) ~ "Disturbance",
                                label %in% c(3,10,14,17,24,2,9,11,19,25) ~ "NPK",
                                label %in% c(4,7,15,16,22) ~ "Control", 
                                label %in% c(5,6,13,18,21) ~ "NPK+Disturbance",
                                .default = "Outside_treatments"
    )) |> 
  mutate( drying_cycle = case_when( day ==29 & month == 01 ~ "1",
                                    day == 30 & month == 01 ~"1" ,
                                    day == 31 & month == 01 ~ "1", 
                                    day == 05 ~ "2", 
                                    day == 06 ~ "2", 
                                    day == 07 ~ "2",
                                    day == 27 & month == 03 ~ "3",
                                    day== 28 & month == 03 ~ "3",
                                    day == 29 & month == 03 ~ "3",
                                    day == 01 & month == 04 ~ "3", 
                                    month == 7 ~ "4", 
                                    month == 8 ~ "4",
                                    .default = "0"
                                    
    
    
    
  )) |> 
  mutate(dar = case_when(
    day ==29 & month == 01 ~ "1",
    day == 30 & month == 01 ~"2" ,
    day == 31 & month == 01 ~ "3",
    day == 05 ~ "1",
    day == 06 ~ "2",
    day == 07 ~ "3",
    day == 27 & month == 03 ~ "1",
     day== 28 & month == 03 ~ "2",
    day == 29 & month == 03 ~ "3",
    day == 01 & month == 04 ~ "6",
    day == 30 & month == 07 ~ "1",
     day == 31 & month == 07 ~ "2",
    day == 01 & month == 08 ~ "3",
    day == 02 & month == 08 ~ "4",
    .default = "0"
    
    
  )
           
           ) |> 
   mutate(
    rep = case_when
    (label %in% c(1:5) ~ "1",
    label %in%  c(6:10) ~ "2",
      label %in%  c(11:15) ~ "3",
      label %in%  c(16:20) ~ "4", 
      label %in%  c(21:25) ~ "5",
      .default = "None"
     )
  ) |> 
  mutate(fdar = factor(dar),
         treatment = factor(treatment),
         label = factor(label),
         rep = factor(rep)) |> 
  filter(!treatment == "Outside_treatments") |> 
  mutate(time = yday(date_time) - 28) |> 
  mutate(time_of_day = if_else(am(date_time),"am","pm")) |> 
  mutate(ftime = factor(time)) |> 
  filter(!swc < 0.01)
#write.csv(resp_data_w, "Data/licor_wrangled.csv")
```
At each plot, three measurements were made. In some plots, one of the three readings seemed to be off due to instrument problems, these were corrected using the IQR method. values beyond the bounds were converted to the mean of the three readings. 

```{r}
multiplier <- 1.5
resp_data_w <- resp_data_w |> 
  group_by(label,day,month) |> 
  mutate(iqr = IQR(swc, na.rm = T)) |> 
  mutate(lower_bound = quantile(swc, 0.25)- iqr  , 
         upper_bound = quantile(swc, 0.75)+ iqr, 
         mean = mean(swc, na.rm = T)) |> 
  ungroup() |> 
  mutate(swc = case_when(swc < lower_bound ~ mean,
                         swc > upper_bound ~ upper_bound,
                         .default = swc
                         )) 
```



```{r}
resp_data_subset <- subset(resp_data_w, treatment != "Outside_treatments", select = c(treatment, flux))
lineplot.CI(x.factor = treatment, response = flux, data = resp_data_subset)
#ggsave("Output/linegraph_CI.jpg")
```
Homogeneity of variance
```{r}
leveneTest(flux~treatment, data = resp_data_w)
```
Cannot reject null-hypotheses, therefore we can say that the variances are same for the groups. We move forward with a parametric test (anova)

```{r}
hist(resp_data_w$flux)
qqPlot(final_dryingcycle$flux)
resp_data_w |> 
  filter(swc < 0.1)
```

```{r}
resp_data_w |> 
  filter(!treatment == "Outside_treatments") |> 
  ggscatter(x = "swc", y = "flux",
            color = "treatment", add = "reg.line")+
  stat_regline_equation(
    aes(label = paste(after_stat(eq.label), ..rr.label.., sep = "~~~~"), color = treatment))
```

```{r}
resp_final <-
  resp_data_w |> 
  summarise(flux = mean(flux),
            swc = mean(swc),
            ts = mean(ts),
            ta = mean(ta),
            date_time = mean(date_time),
            .by = c("label","day","month","time_of_day","treatment","drying_cycle","ftime","time","rep","dar","fdar")) |> 
    ungroup() 

resp_final
#write.csv(resp_final, "Data/licor_aggregated.csv")
```
 
 
 
 
 Not required - Kruskall-Wallis test
```{r}
kruskal.test(flux ~ treatment, data = resp_final)
pwc <- pairwise.wilcox.test(resp_final$flux, resp_final$treatment,
                            p.adjust.method = "BH")
dunnt <- dunnTest(x = resp_data_w$flux, g = resp_data_w$treatment, method = "bonferroni")
dunns <- dunnt$res
cld <- cldList(comparison = dunns$Comparison,
               p.value = dunns$P.adj,
               threshold = 0.05)
names(cld)[1] <- "treatment"

```

code chunk from [https://statsandr.com/blog/how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way/]
The below chunk does anova for each variable, if differences are found pairwise comparisons are done as well. 
Holm correction is applied to p-values to avoid false-positives
```{r}

# edit from here
library(ggstatsplot)
library(tibble)
dat <- resp_final
x <- "treatment"
cols <- 12:15 # the 4 continuous dependent variables
type <- "parametric" # given the large number of observations, we use the parametric version
paired <- F # FALSE for independent samples, TRUE for paired samples
# edit until here

# edit at your own risk
plotlist <-
  purrr::pmap(
    .l = list(
      data = list(as_tibble(dat)),
      x = x,
      y = as.list(colnames(dat)[cols]),
      plot.type = "box", # for boxplot
      type = type, # parametric or nonparametric
      pairwise.comparisons = TRUE, # to run post-hoc tests if more than 2 groups
      pairwise.display = "significant", # show only significant differences
      bf.message = FALSE, # remove message about Bayes Factor
      centrality.plotting = FALSE # remove central measure
    ),
    .f = ifelse(paired, # automatically use ggwithinstats if paired samples, ggbetweenstats otherwise
      ggstatsplot::ggwithinstats,
      ggstatsplot::ggbetweenstats
    ),
    violin.args = list(width = 0, linewidth = 0) # remove violin plots and keep only boxplots
  )
length(plotlist)
# print all plots together with statistical results
for (i in 1:length(plotlist)) {
  print(plotlist[[i]])
  #ggsave(filename = paste0("plot_",i,".png"), plot = plotlist[[i]], width = 7, height = 5, dpi = 300)
}
#save("Output/anova_flux.jpg")
```
only final drying cycle
```{r}
final_dryingcycle <- resp_final |> 
  filter(drying_cycle == 4)

library(ggstatsplot)
library(tibble)
dat <- final_dryingcycle
x <- "treatment"
cols <- 12:15 # the 4 continuous dependent variables
type <- "parametric" # given the large number of observations, we use the parametric version
paired <- FALSE # FALSE for independent samples, TRUE for paired samples
# edit until here

# edit at your own risk
plotlist <-
  purrr::pmap(
    .l = list(
      data = list(as_tibble(dat)),
      x = x,
      y = as.list(colnames(dat)[cols]),
      plot.type = "box", # for boxplot
      type = type, # parametric or nonparametric
      pairwise.comparisons = TRUE, # to run post-hoc tests if more than 2 groups
      pairwise.display = "significant", # show only significant differences
      bf.message = FALSE, # remove message about Bayes Factor
      centrality.plotting = FALSE # remove central measure
    ),
    .f = ifelse(paired, # automatically use ggwithinstats if paired samples, ggbetweenstats otherwise
      ggstatsplot::ggwithinstats,
      ggstatsplot::ggbetweenstats
    ),
    violin.args = list(width = 0, linewidth = 0) # remove violin plots and keep only boxplots
  )

# print all plots together with statistical results
for (i in 1:length(plotlist)) {
  print(plotlist[[i]])
  
  #ggsave(plotlist[[i]], file = paste0("plot_", i,".png"), width = 14, height = 10, units = "cm")
}

```
anova - to be continued later 

```{r}
options(contrasts = c("contr.sum", "contr.poly"))

mix_mod <- lme(flux ~ treatment *ftime,
               random = ~ 1| rep/label,
               data = resp_final)
mix_mod
Anova(mix_mod, type = 3)

mod2_ma <- lme(flux ~ treatment*ftime,
                random = ~1 |rep/label,
               correlation = corARMA(p = 1, q = 1),
                data = resp_final)

mod3_exp <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corGaus(form = ~time),
                data = resp_final)
mod1_gen <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corSymm(),
                data = resp_final)

ACF(mod3_exp, resType = "n") |> 
  plot(alpha = 0.01)
anova(mix_mod,mod2_ma,mod3_exp)
```
```{r fig.width= 8, fig.height= 5}
resp_final1 <- resp_final
resp_final1$date_time <- factor(format(resp_final$date_time, format = "%m-%d"))

resp_final1 |> 
  group_by(date_time,treatment, time_of_day) |> 
  summarise(mean_flux = mean(flux, na.rm = T)) |> 
  ggplot(aes(date_time, mean_flux, group = treatment, color = treatment))+
  geom_line()+
  geom_point()+
    theme(axis.text.x = element_text(angle = 30, hjust = 0.5, vjust = 0.5))

#ggsave("timeseries.jpg", width = 10, height = 10)
```

subsetting different drying cycles 
```{r}
event1 <- resp_final|> 
  filter(drying_cycle == 1) 
event2 <- resp_final |> 
  filter(drying_cycle == 2)
event3 <- resp_final |> 
  filter(drying_cycle ==3) |> 
  filter(!time_of_day == "pm")
event4 <- resp_final |> 
  filter(drying_cycle == 4) |> 
  filter(!time_of_day == "pm")
```

# drying cycle 1 
```{r}
library(ggstatsplot)
library(ggpubr)

# boxplots of different treatments, with kruskal-wallis test for flux v/s treatment, and wilcox pairwise test. 
my_comparison <- list(c("Control", "NPK"), c("Control", "NPK+Disturbance"))
ggboxplot(event1, x = "treatment" , y = "flux",
          add = "jitter", color = "treatment")+
  geom_hline(yintercept = mean(event1$flux), linetype = 2)+
  stat_compare_means(method = "kruskal.test", label.y = 3.0)+
  stat_compare_means(ref.group = ".all.", label = "p.signif", hide.ns = T)

# line plot with the same variables as above
ggline(event1, x = "treatment" , y = "flux", add = "mean_se")+
  stat_compare_means(label.y = 2.0)+
  stat_compare_means(ref.group = ".all.", label = "p.signif", hide.ns = T, label.y = 1.5)

```

# Boxplot and lineplot of flux v/s days after rain with boxes of different colors based on the treatment
```{r}
ggboxplot(event1, x = "fdar", y = "flux", color = "treatment", add = "jitter")+
  stat_compare_means(aes(group = treatment))+
  stat_compare_means(aes(group = treatment),label = "p.signif", label.y = 1.7)

event1_lp <- ggline(event1, x = "fdar", y = "flux", color = "treatment", add = "mean_se")+
  labs(x = "days after rain",
             y = "soil respiration",
       title = "Drying cycle 1")+
  theme(plot.margin = unit(c(0,0.2,0,0.2), 'lines'))+
  stat_compare_means(aes(group = treatment), label = "p.signif", label.y = 1.7)
#ggsave("Output/flux_event1.jpg")

```
# Flux- drying cycle 2 
Plots of flux v/s days after rain for drying cycle 2
```{r}
event2_lp <- ggline(event2, x = "fdar", y = "flux", color = "treatment", add = "mean_se")+
  labs(x = "days after rain",
             y = "soil respiration",
       title = "Drying cycle 2")+
  theme(plot.margin = unit(c(0,0.2,0,0.2), 'lines'))+
  stat_compare_means(aes(group = treatment), label = "p.signif", label.y = 1.3)
```
# Flux - drying cycle 3 
```{r}
event3_lp <- ggline(event3, x = "fdar", y = "flux", color = "treatment", add = "mean_se")+
  labs(x = "days after rain",
             y = "soil respiration",
       title = "Drying cycle 3")+
  theme(plot.margin = unit(c(1,1,1,1), 'lines'))+
  stat_compare_means(aes(group = treatment), label = "p.signif")
#ggsave("afternoon_outdc3.jpg")
#event3 |> 
  group_by(fdar, treatment, time_of_day) |> 
  summarise(mean_flux = mean(flux, na.rm = T)) |> 
ggplot(aes(fdar, mean_flux, color = treatment, shape = time_of_day))+
  geom_line(aes(group = interaction(treatment, time_of_day)))+
  geom_point()
```

# FLux - drying cycle 4 
```{r}
event4_lp <- ggline(event4, x = "fdar", y = "flux", color = "treatment", add = "mean_se"
                   )+
  labs(x = "days after rain",
             y = "soil respiration",
       title = "Drying cycle 4")+
  theme(plot.margin = unit(c(1,1,1,1), 'lines'))+
  stat_compare_means(aes(group = treatment), label = "p.signif", label.y = 5)
#ggsave("afternoon_outdc4.jpg")

```
Combining all four events in one plot 
```{r fig.width=9, fig.height=11}
fig <- ggarrange(event1_lp+rremove("xlab"), event2_lp+rremove("xlab")+rremove("ylab"), event3_lp,event4_lp+rremove("ylab"),
                 labels = NA,
                 label.y = 1,
                 ncol = 2, nrow = 2,
                 common.legend = T,
                 label.x = 0.5,
                 legend = "right"
                 
                 )
fig_final <- annotate_figure(fig, top = text_grob("Flux across events",size = 14, face = "bold", x = 0.4)
                             )

#ggsave(filename = "flux_combined.jpg",
       plot = fig_final,
       width = 270, # 14.1 x 5.05 in 358 x 256 mm 
       height = 195,# 
       units = "mm",
       dpi = 200,
       device = "bmp"
)
```


# Moisture - drying cycle 1

```{r}
event1_moisture <- ggline(event1, x = "fdar", y = "swc", color = "treatment", add = "mean_se")+
  labs(x = "days after rain",
             y = "soil moisture",
       title = "Drying cycle 1")+
  theme(plot.margin = unit(c(0,0.2,0,0.2), 'lines'))+
  stat_compare_means(aes(group = treatment), label = "p.signif", label.y = 0.4)

```
# Moisture - drying cycle 2
```{r}
event2_moisture <- ggline(event2, x = "fdar", y = "swc", color = "treatment", add = "mean_se")+
   labs(x = "days after rain",
             y = "soil moisture",
       title = "Drying cycle 2")+
  theme(plot.margin = unit(c(0,0.2,0,0.2), 'lines'))+
  stat_compare_means(aes(group = treatment), label = "p.signif", label.y = 0.4)
```
# Moisture - drying cycle 3
```{r}
event3_moisture <- ggline(event3, x = "fdar", y = "swc", color = "treatment", add = "mean_se")+
  labs(x = "days after rain",
             y = "soil moisture",
       title = "Drying cycle 3")+
  theme(plot.margin = unit(c(1,1,1,1), 'lines'))+
  stat_compare_means(aes(group = treatment), label = "p.signif", label.y = 0.4)
```
# Moisture - drying cycle 3
```{r}
event4_moisture <- ggline(event4, x = "fdar", y = "swc", color = "treatment", add = "mean_se")+
  labs(x = "days after rain",
             y = "soil moisture",
       title = "Drying cycle 4")+
  theme(plot.margin = unit(c(1,1,1,1), 'lines'))+
  stat_compare_means(aes(group = treatment), label = "p.signif", label.y = 0.4)
```

```{r fig.width=9, fig.height=11}
fig_moisture <- ggarrange(event1_moisture+rremove("xlab"), event2_moisture+rremove("xlab")+rremove("ylab"), event3_moisture,event4_moisture+rremove("ylab"),
                 labels = NA,
                 label.y = 1,
                 ncol = 2, nrow = 2,
                 common.legend = T,
                 label.x = 0.5,
                 legend = "right"
                 
                 )
fig_final_moisture <- annotate_figure(fig_moisture, top = text_grob("Flux across events",size = 14, face = "bold", x = 0.4))

#ggsave(filename = "moisture_combined.jpg",
       plot = fig_final_moisture,
       width = 270, # 14.1 x 5.05 in 358 x 256 mm 
       height = 195,# 
       units = "mm",
       dpi = 200,
       device = "bmp"
)
```




```{r}
set.seed(123)
install.packages("rstantools")

ggbetweenstats(
  data = resp_final,
  x = treatment,
  y = flux,
  nboot = 10
)
```
anova for just drying cycle 4

```{r}
event4 |> 
  ggplot(aes(treatment, flux))+
  geom_boxplot()+
  facet_wrap(~fdar)
```

```{r}
options(contrasts = c("contr.sum", "contr.poly"))
event4_gen <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corSymm(),
                data = event4)
event4_exp <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corExp(form = ~time),
                data = event4)
event4_gaus <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corGaus(form = ~time),
                data = event4)
event4_lin <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corLin(form = ~time),
                data = event4)
event4_rq <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corRatio(form = ~time),
                data = event4)
event4_sph <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corSpher(form = ~time),
                data = event4)
anova(event4_gen,event4_exp,event4_gaus, event4_lin,event4_rq, event4_sph)
Anova(event4_gen,type = 3)
```
```{r}
event4_cld <- emmeans(event4_gen, ~treatment:ftime) %>%
  cld(reversed = T,
      Letters = letters,
      adjust = "none"
      ) %>%
  as.data.frame() %>%
  mutate(letter = trimws(.group)) 
```
Looks good, figure out how to add error bars, running into problems when doing that 
```{r}
event4_finallp <- event4 |> 
  group_by(ftime, treatment) |> 
  summarise(mean_flux = mean(flux, na.rm = T)) |> 
ggplot(aes(ftime, mean_flux, color = treatment))+
  geom_line(aes(group = interaction(treatment)))+
  geom_point()+
  geom_label(data = event4_cld,
    aes(x = ftime, y = emmean, label = letter ), fill = "white", size = 3,position = position_dodge(width = 0.5))+
  labs(x = "Days after rain",
       y = "Flux (μmol/m2-s)", 
       title = "Drying cycle 4")+
  scale_x_discrete(labels = c("1","2","3","5"))+
  scale_fill_viridis_d()+
  theme_grey()

```
For drying cycle 3 
```{r}
options(contrasts = c("contr.sum", "contr.poly"))
event3_gen <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corSymm(),
                data = event3)
event3_exp <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corExp(form = ~time),
                data = event3)
event3_gaus <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corGaus(form = ~time),
                data = event3)
event3_lin <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corLin(form = ~time),
                data = event3)
event3_rq <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corRatio(form = ~time),
                data = event3)
event3_sph <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corSpher(form = ~time),
                data = event3)
anova(event3_gen,event3_exp,event3_gaus, event3_lin,event3_rq, event3_sph)
Anova(event3_exp,type = 3)
```

```{r}
event3_cld <- emmeans(event3_exp, ~treatment|ftime) %>%
  cld(reversed = T,
      Letters = letters,
      adjust = "none"
      ) %>%
  as.data.frame() %>%
  mutate(letter = trimws(.group)) 
```

```{r}
event3_finallp <- event3 |> 
  group_by(ftime, treatment) |> 
  summarise(mean_flux = mean(flux, na.rm = T)) |> 
ggplot(aes(ftime, mean_flux, color = treatment))+
  geom_line(aes(group = interaction(treatment)))+
  geom_point()+
  geom_label(data = event3_cld,
    aes(x = ftime, y = emmean, label = letter ), fill = "white", size = 3,position = position_dodge(width = 0.4))+
  labs(x = "Days after rain",
       y = "Flux (μmol/m2-s)", 
       title = "Drying cycle 3")+
  scale_x_discrete(labels = c("1","3","6"))+
  scale_fill_viridis_d()+
  theme_grey()
```


For drying cycle 2
```{r}
options(contrasts = c("contr.sum", "contr.poly"))
event2_gen <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corSymm(),
                data = event2)
event2_exp <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corExp(form = ~time),
                data = event2)
event2_gaus <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corGaus(form = ~time),
                data = event2)
event2_lin <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corLin(form = ~time),
                data = event2)
event2_rq <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corRatio(form = ~time),
                data = event2)
event2_sph <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corSpher(form = ~time),
                data = event2)
anova(event2_gen,event2_exp,event2_gaus, event2_lin,event2_rq, event2_sph)
Anova(event2_exp,type = 3)
```

```{r}
event2_cld <- emmeans(event2_exp, ~treatment|ftime) %>%
  cld(reversed = T,
      Letters = letters,
      adjust = "none"
      ) %>%
  as.data.frame() %>%
  mutate(letter = trimws(.group)) 
```

```{r}
event2_finallp <- event2 |> 
  group_by(ftime, treatment) |> 
  summarise(mean_flux = mean(flux, na.rm = T)) |> 
ggplot(aes(ftime, mean_flux, color = treatment))+
  geom_line(aes(group = interaction(treatment)))+
  geom_point()+
  geom_label(data = event2_cld,
    aes(x = ftime, y = emmean, label = letter ), fill = "white", size = 3,position = position_dodge(width = 0.5))+
  labs(x = "Days after rain",
       y = "Flux (μmol/m2-s)", 
       title = "Drying cycle 2")+
  scale_x_discrete(labels = c("1","2","3"))+
  scale_fill_viridis_d()+
  theme_grey()
```
For drying cycle 1 
```{r}
options(contrasts = c("contr.sum", "contr.poly"))
event1_gen <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corSymm(),
                data = event1)
event1_exp <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corExp(form = ~time),
                data = event1)
event1_gaus <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corGaus(form = ~time),
                data = event1)
event1_lin <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corLin(form = ~time),
                data = event1)
event1_rq <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corRatio(form = ~time),
                data = event1)
event1_sph <- lme(flux ~ treatment*ftime,
                random = ~ 1|rep/label,
               correlation = corSpher(form = ~time),
                data = event1)
anova(event1_gen,event1_exp,event1_gaus, event1_lin,event1_rq, event1_sph)
Anova(event1_gen,type = 3)
```

```{r}
event1_cld <- emmeans(event1_gen, ~treatment|ftime) %>%
  cld(reversed = T,
      Letters = letters,
      adjust = "none"
      ) %>%
  as.data.frame() %>%
  mutate(letter = trimws(.group)) 
```

```{r}
event1_finallp <- event1 |> 
  group_by(ftime, treatment) |> 
  summarise(mean_flux = mean(flux, na.rm = T)) |> 
ggplot(aes(ftime, mean_flux, color = treatment))+
  geom_line(aes(group = interaction(treatment)))+
  geom_point()+
  geom_label(data = event1_cld,
    aes(x = ftime, y = emmean, label = letter ), fill = "white", size = 3,position = position_dodge(width = 0.5))+
  labs(x = "Days after rain",
       y = "Flux (μmol/m2-s)", 
       title = "Drying cycle 1")+
  scale_x_discrete(labels = c("1","2","3"))+
  scale_fill_viridis_d()+
  theme_grey()
```

```{r}
#resp_final |> 
  #filter(!drying_cycle == 0) |> 
  ggplot(transform(resp_final,swc1 = cut(swc, seq(0,1,0.1))),
         aes(treatment,flux))+
  geom_jitter(aes(color = treatment))+
  facet_wrap(~swc1)

resp_final |> 
  filter(!drying_cycle == 0) |> 
  ggplot(aes(swc,flux))+
  geom_point(aes(color = treatment))+
  geom_smooth(aes(color = treatment),se = F, method = "lm")+
  facet_wrap(~drying_cycle)
```

```{r fig.width=10, fig.height= 8}
final_lp <- ggarrange(event1_finallp+rremove("xlab"), event2_finallp+rremove("xlab")+rremove("ylab"), event3_finallp,event4_finallp+rremove("ylab"),
                 labels = NA,
                 label.y = 1,
                 ncol = 2, nrow = 2,
                 common.legend = T,
                 label.x = 0.5,
                 legend = "right"
                 
                 )
fig_final_lp <- annotate_figure(final_lp, top = text_grob("Flux across events",size = 14, face = "bold", x = 0.4))
#ggsave(filename = "final_lp.jpg",
       plot = fig_final_lp,
       width = 270, # 14.1 x 5.05 in 358 x 256 mm 
       height = 195,# 
       units = "mm",
       dpi = 200,
       device = "bmp"
)
```


```{r}
trt_1 <- resp_final |> 
  filter(treatment == "NPK") |> 
  filter(!drying_cycle == 0 & !drying_cycle == 4) |> 
  filter(!drying_cycle == 3 | !drying_cycle ==4 & !time_of_day == "pm") |> 
  summarise(mean_flux = mean(flux),
            sd_flux = sd(flux),
            .by = time,treatment,drying_cycle,dar) |> 
  ungroup() |> 
  ggplot(aes(dar,mean_flux))+
  geom_point(aes(color = drying_cycle), position = position_dodge(0.5))+
  geom_errorbar(aes(ymin = mean_flux -sd_flux , ymax = mean_flux +sd_flux, color = drying_cycle), width = 0.2, position = position_dodge(0.5))+
 scale_y_continuous(breaks = seq(0.3,1.8,by=0.2),
                     limits = c(0.3,1.8)
                     )+
  labs(title = "NPK")+
  theme(panel.grid.minor.y = element_blank())
  
```

```{r}
trt_2 <- resp_final |> 
  filter(treatment == "NPK+Disturbance") |> 
  filter(!drying_cycle == 0 & !drying_cycle == 4) |> 
  filter(!drying_cycle == 3 | !drying_cycle ==4 & !time_of_day == "pm") |> 
  summarise(mean_flux = mean(flux),
            sd_flux = sd(flux),
            .by = time,treatment,drying_cycle,dar) |> 
  ungroup() |> 
  ggplot(aes(dar,mean_flux))+
  geom_point(aes(color = drying_cycle), position = position_dodge(0.5))+
  geom_errorbar(aes(ymin = mean_flux -sd_flux , ymax = mean_flux +sd_flux, color = drying_cycle), width = 0.2, position = position_dodge(0.5))+
  scale_y_continuous(breaks = seq(0.3,1.8,by=0.2),
                     limits = c(0.3,1.8)
                     )+
  labs(title = "NPK+Disturbance")+
  theme(panel.grid.minor.y = element_blank())
```

```{r}
trt_3 <- resp_final |> 
  filter(treatment == "Disturbance") |> 
  filter(!drying_cycle == 0 & !drying_cycle == 4) |> 
  filter(!drying_cycle == 3 | !drying_cycle ==4 & !time_of_day == "pm") |> 
  summarise(mean_flux = mean(flux),
            sd_flux = sd(flux),
            .by = time,drying_cycle,dar) |> 
  ungroup() |> 
  ggplot(aes(dar,mean_flux))+
  geom_point(aes(color = drying_cycle), position = position_dodge(0.5))+
  geom_errorbar(aes(ymin = mean_flux -sd_flux , ymax = mean_flux +sd_flux, color = drying_cycle), width = 0.2, position = position_dodge(0.5))+
  scale_y_continuous(breaks = seq(0.3,1.8,by=0.2),
                     limits = c(0.3,1.8)
                     )+
  labs(title = "Disturbance")+
  theme(panel.grid.minor.y = element_blank())
```

```{r}
trt_4 <- resp_final |> 
  filter(treatment == "Control") |> 
  filter(!drying_cycle == 0 & !drying_cycle == 4) |> 
  filter(!drying_cycle == 3 | !drying_cycle ==4 & !time_of_day == "pm") |> 
  summarise(mean_flux = mean(flux),
            sd_flux = sd(flux),
            .by = time,drying_cycle,dar) |> 
  ungroup() |> 
  ggplot(aes(dar,mean_flux))+
  geom_point(aes(color = drying_cycle), position = position_dodge(0.5))+
  geom_errorbar(aes(ymin = mean_flux -sd_flux , ymax = mean_flux +sd_flux, color = drying_cycle), width = 0.2, position = position_dodge(0.5))+
  scale_y_continuous(breaks = seq(0.3,1.8,by=0.2),
                     limits = c(0.3,1.8)
                     )+
  labs(title = "Control")+
  theme(panel.grid.minor.y = element_blank())
```

```{r fig.width=6, fig.height=5}
library(grid)
trt_wise <- ggarrange(trt_1+rremove("xlab")+rremove("ylab"), trt_2+rremove("xlab")+rremove("ylab"), trt_3+rremove("ylab")+rremove("xlab"),trt_4+rremove("xlab")+rremove("ylab"),
                 labels = NA,
                 label.y = 1,
                 ncol = 2, nrow = 2,
                 common.legend = T,
                 label.x = 0.5,
                 legend = "right",
                 align = "hv"
                 
                 
)
trt_wise_annotated <- annotate_figure(trt_wise, left = textGrob("Mean flux (μmol/m2-s)", rot = 90, gp = gpar(cex = 1.3)),
                top = textGrob("Trends in flux", gp = gpar(cex = 1.3)),
                    bottom = textGrob("Days after rain", gp = gpar(cex = 1.3)))
ggsave(filename = "trt_wise.jpg",
       plot = trt_wise_annotated,
       width = 270, # 14.1 x 5.05 in 358 x 256 mm 
       height = 195,# 
       units = "mm",
       dpi = 200,
       device = "bmp"
)
                 
```

```{r}
dc4_trt_1 <- resp_final |> 
  filter(treatment == "NPK") |> 
  filter(drying_cycle == 4) |> 
  filter(!time_of_day == "pm") |> 
  summarise(mean_flux = mean(flux),
            sd_flux = sd(flux),
            .by = time,dar) |> 
  ungroup() |> 
  ggplot(aes(dar,mean_flux))+
  geom_point(position = position_dodge(0.5))+
  geom_errorbar(aes(ymin = mean_flux -sd_flux , ymax = mean_flux +sd_flux), width = 0.2, position = position_dodge(0.5))+
  scale_y_continuous(breaks = seq(1.8,4.5,by=0.2),
                     limits = c(1.8,4.5)
                     )+
  labs(title = "NPK")+
  theme(panel.grid.minor.y = element_blank())
```



```{r }
resp_final |> 
  filter(!drying_cycle == 0 & !drying_cycle == 4) |> 
  filter(!drying_cycle == 3 | !drying_cycle ==4 & !time_of_day == "pm") |> 
  summarise(mean_flux = mean(flux),
            sd_flux = sd(flux),
            .by = time,treatment,drying_cycle,dar) |> 
  ungroup() |> 
  ggplot(aes(dar,mean_flux))+
  geom_point(aes(color = drying_cycle), position = position_dodge(0.5))+
  geom_errorbar(aes(ymin = mean_flux -sd_flux , ymax = mean_flux +sd_flux, color = drying_cycle), width = 0.2, position = position_dodge(0.5)) +
  facet_wrap(~treatment)
```
GLMM
```{r}
event_4_removed <- resp_final |> 
  filter(!drying_cycle == 4)
#devtools::install_github("dustinfife/flexplot")
require(flexplot)
baseline <- lmer(flux~1 + (1|label), data = resp_final)
summary(baseline)
one_variable_fixed <- lmer(flux~ 1+treatment+(1|label),data = resp_final)
summary(one_variable_fixed)
two_variable_fixed <- lmer(flux ~ treatment+swc + (1|label), data = event_4_removed)
summary(two_variable_fixed)
two_variable_random <- lmer(flux~treatment+swc+(1+swc|label), data = event_4_removed)
summary(two_variable_random)

visualize(two_variable_random,
          formula = flux~ treatment, sample = 25)
compare.fits(flux ~ swc | treatment + label,
             data = resp_final,
             model1 = two_variable_fixed,
             model2 = two_variable_random,
             re = T, 
             clusters = 5)
visualize(two_variable_fixed, plot = "residuals")
```
modelling swc as a fixed effects seems to be doing better, we will proceed with that 

```{r}
resp_data_finalw |> 
  ggplot(aes(swc,ts, fill = fco2_dry, width = .7))+
  geom_tile()+
  scale_fill_gradient(low = "white", high = "blue")+
  theme_minimal()
```

Not being used anymore 

```{r}
 # mutate(time = case_when(day == 29 & month == 01 ~ "1",
                                    day == 30 & month == 01 ~"2" ,
                                    day == 31 & month == 01 ~ "3", 
                                    day == 05 ~ "4", 
                                    day == 06 ~ "5", 
                                    day == 07 ~ "6",
                                    day == 25 & month == 03 ~ "7",
                                    day == 27 & month == 03 & time_of_day == "am" ~ "8",
                                    day == 27 & month == 3 & time_of_day == "pm" ~ "9",
                                    day== 28 & month == 03 ~ "10",
                                    day == 29 & month == 03 ~ "11",
                                    day == 01 & month == 04 ~ "12", 
                                    day == 30 & month == 7 & time_of_day == "am" ~ "13", 
                                    day == 30 & month == 7 & time_of_day == "pm"~ "14",
                                    day == 31 & month == 7 ~ "15",
                                    day == 01 & month == 8 ~ "16",
                                    day == 02 & month == 8 ~ "17",
                                    .default = "0"
                                    
   )) |>
```

